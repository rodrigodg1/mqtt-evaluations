/**
 * Package benchmark provides functions for benchmarking code.
 */
export interface Results {
    iterations: number;
    msPerOp: number;
    opsPerSecond: number;
    bytesPerSecond?: number;
}
export declare function benchmark(fn: () => any, bytes?: number): Results;
export declare function benchmarkAsync(fn: (done: () => void) => any, doneCallback: (results: Results) => void, bytes?: number): void;
export declare function benchmarkPromise(fn: () => Promise<any>, bytes?: number): Promise<Results>;
export declare function report(name: string, results: Results): void;
/**
 * Returns a Uint8Array of the given length containing
 * sequence of bytes 0, 1, 2 ... 255, 0, 1, 2, ...
 *
 * If the start byte is given, the sequence starts from it.
 */
export declare function byteSeq(length: number, start?: number): Uint8Array;
